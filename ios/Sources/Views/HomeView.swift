import SwiftUI

struct HomeView: View {
    @StateObject private var store = ProgressStore()
    @State private var referenceText: String = ""
    @State private var startPractice = false

    var body: some View {
        NavigationView {
            VStack(spacing: 16) {
                Text("„Åä„Çì„Å©„Åè „ÉÅ„É£„É¨„É≥„Ç∏ÔºÅ").font(.largeTitle).bold()
                Text("„Çå„Çì„Åó„ÇÖ„ÅÜ „Å§„Å•„Åë„Å¶ \(store.streakDays) „Å´„Å°„ÇÅÔºÅüëç")
                if let last = store.history.first {
                    VStack {
                        Text("„Åï„ÅÑ„Åç„Çì„ÅÆ „Åë„Å£„Åã")
                        Text("üåü x\(last.stars)  |  „Åô„Åì„ÅÇ \(Int(last.overall))„Å¶„Çì").font(.headline)
                    }.padding().background(.thinMaterial).cornerRadius(12)
                }
                if !store.history.isEmpty {
                    NavigationLink("„Åç„Çç„Åè„Çí „Ç®„ÇØ„Çπ„Éù„Éº„Éà", destination: CSVExporter(rows: store.history))
                }
                NavigationLink(isActive: $startPractice) {
                    PracticeFlowView(store: store)
                } label: {
                    EmptyView()
                }
                Button {
                    startPractice = true
                } label: {
                    Text("„Çå„Çì„Åó„ÇÖ„ÅÜ„Çí „ÅØ„Åò„ÇÅ„Çã").font(.title2).bold().frame(maxWidth: .infinity)
                }
                .buttonStyle(.borderedProminent)
                .padding(.top, 8)

                HStack {
                    NavigationLink("„ÇØ„É©„Ç∑„ÉÉ„ÇØ „Éï„É≠„Éº", destination: ContentView())
                    Spacer()
                    NavigationLink("„Åõ„Å£„Å¶„ÅÑ", destination: SettingsView())
                }

                List {
                    Section("„Çå„Çì„Åó„ÇÖ„ÅÜ„ÅÆ „Åç„Çç„Åè") {
                        ForEach(store.history) { r in
                            HStack {
                                Text("üåü\(r.stars)")
                                VStack(alignment: .leading) {
                                    Text(r.title).lineLimit(1)
                                    Text("\(Int(r.overall))„Å¶„Çì | „Åõ„ÅÑ„Åã„Åè„Åï \(Int(r.accuracy)) | „Åô„Å¥„Éº„Å© \(Int(r.speed))")
                                        .font(.footnote).foregroundColor(.secondary)
                                }
                                Spacer()
                            }
                        }
                    }
                }.frame(maxHeight: 260)
                Spacer()
            }
            .padding()
            .navigationTitle("„Éõ„Éº„É†")
        }
    }
}
